{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from './types';\nimport setAuthToken from '../utils/setAuthToken'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  // if(localStorage.token) {\n  //     setAuthToken(localStorage.token);\n  //   }\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/MernProject/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAuthToken","loadUser","dispatch","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,SAAvB;AACA,SAAQC,gBAAR,EACIC,aADJ,EAEIC,WAFJ,EAGIC,UAHJ,QAIO,SAJP;AAKA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAGA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC5C;AACA;AACA;AACA,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,WAAV,CAAlB;AACAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,WADC;AAEPQ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;AAGD;AACF,CAfI,C,CAiBP;;AACA,OAAO,MAAMU,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAOC,EAAAA,KAAP;AAAaC,EAAAA;AAAb,CAAD,KAA6B,MAAMV,QAAN,IAAkB;AACnE,QAAMW,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAe;AADV;AADE,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAOC,IAAAA,KAAP;AAAaC,IAAAA;AAAb,GAAf,CAAb;;AACA,MAAI;AACA,UAAMT,GAAG,GAAG,MAAMT,KAAK,CAACwB,IAAN,CAAW,YAAX,EAAwBH,IAAxB,EAA6BF,MAA7B,CAAlB;AACAX,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAACT,gBADA;AAELU,MAAAA,OAAO,EAACH,GAAG,CAACI;AAFP,KAAD,CAAR;AAIH,GAND,CAMC,OAAMC,GAAN,EAAU;AACP,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AACA,QAAGA,MAAH,EAAW;AACPA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIpB,QAAQ,CAACP,QAAQ,CAAC2B,KAAK,CAACC,GAAP,EAAW,QAAX,CAAT,CAAhC;AACH;;AACDrB,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAACR;AADA,KAAD,CAAR;AAIH;AACJ,CAvBM","sourcesContent":["import axios from 'axios';\r\nimport {setAlert} from './alert';\r\nimport {REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_ERROR\r\n} from './types';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n\r\n//Load User\r\nexport const loadUser = () => async dispatch => {\r\n    // if(localStorage.token) {\r\n    //     setAuthToken(localStorage.token);\r\n    //   }\r\n    try {\r\n      const res = await axios.get('/api/auth');\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    }\r\n  };\r\n\r\n//Register user\r\nexport const register = ({ name,email,password }) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type':'application/json'\r\n        }\r\n    }\r\n    const body = JSON.stringify({ name,email,password });\r\n    try {\r\n        const res = await axios.post('/api/users',body,config);\r\n        dispatch({\r\n            type:REGISTER_SUCCESS,\r\n            payload:res.data\r\n        });\r\n    }catch(err){\r\n        const errors = err.response.data.errors;\r\n        if(errors) {\r\n            errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\r\n        }\r\n        dispatch({\r\n            type:REGISTER_FAIL\r\n        });\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}